to evaluate-survival
  if age > max-age[
    set death-by-age (death-by-age + 1)
    set death-age (lput age death-age)
    die
  ]
  ;Check if all needs are satisfied (element-wise)

  let bool-list (map [[a b] -> a >= b] needs min-needs)
  if (member? false bool-list)[
    set death-by-starvation (death-by-starvation + 1)

    set death-age (lput age death-age)

   die

  ]
end

to check-reproduce
  ;Check if inventory consist bigger numbers than start-inventory (element-wise)
  let bool-list (map [[a b] -> a > 1.95 * b ] needs start-needs)
  ;set reproduce? true if all the elements of bool-list are true
  set reproduce? not (member? false bool-list)

  if age < fertility-start or age > fertility-end [set reproduce? false]
end

to mate
  ;let candidates n-of (count turtles with [reproduce?]) turtles with [reproduce?]
  ;let candidates (sort-by [ [t1 t2] -> [sum needs] of t1 > [sum needs] of t2] (turtles with [reproduce?]))
  ;let partner sort-by [ [a b] -> [sum needs] of a > [sum needs] of b] (other turtles with [reproduce?] in-radius fog-radius)
  check-reproduce
  if not reproduce? [stop]
  let partner (other turtles with [reproduce?] in-radius fog-radius)
  set partner sort-by [ [a b] ->
    [charm] of a > [charm] of b
  ] partner

  if length partner = 0 [stop]
  set partner first partner
  ;set candidates (sublist candidates 0 (length candidates / 4))
  set new-borns (new-borns + 1)
  set color family-color
  ask partner[
    set color family-color 
  ]
  reproduce self partner

end

to reproduce-set [parents]
  set parents sort parents
  let parent1 item 0 parents
  let parent2 item 1 parents
  
  ask parent1[
    set needs (map - needs min-needs)
    set did-reproduce? true
  ]
  ask parent2[
    set needs (map - needs min-needs)
    set did-reproduce? true
  ]
  reproduce parent1 parent2
  reproduce parent1 parent2
end

to reproduce [parent1 parent2]
  let genome1 [genome] of parent1
  let genome2 [genome] of parent2
  


  let child-genome crossover genome1 genome2
  conceive child-genome parent1 parent2
  ask parent1[
    set needs (map - needs start-needs)
    check-reproduce
    set number-of-childeren (number-of-childeren + 1)
    set did-reproduce? true
  ]
  ask parent2[
    set needs (map - needs start-needs)
    check-reproduce
    set number-of-childeren (number-of-childeren + 1)
    set did-reproduce? true
  ]
end

to-report crossover [genome1 genome2]
  let child-genome []
  
  

  foreach [0 1 2 3][i ->

    let gene1 (cut-gene genome1 i)
    let gene2 (cut-gene genome2 i)
    let weights1 compute-weight-matrix gene1 (item i networks)
    let weights2 compute-weight-matrix gene2 (item i networks)
    
    let layer (random (length network-layers) + 1)
    
    let neuron 0
    if layer < length network-layers[
      set neuron random item layer network-layers 
    ]
    if layer = length network-layers[
     set neuron random item i output-lengths  
    ]
        
    let layer1 item layer weights1
    let layer2 item layer weights2
    
    let row-layer1 item neuron layer1
    let row-layer2 item neuron layer2
    
    set layer1 replace-item neuron layer1 row-layer2
    set layer2 replace-item neuron layer2 row-layer1
    
    set weights1 replace-item layer weights1 layer1
    set weights2 replace-item layer weights2 layer2

    
    set gene1 flatten-weights weights1
    set gene2 flatten-weights weights2
    
    set child-genome (sentence child-genome (one-of list gene1 gene2))
    
      

  ]
  report child-genome
end

to save-cross12452 [gene1 gene2]
  ;
    

end

to conceive [child-genome parent1 parent2]
  let inventory1 [inventory] of parent1
  let inventory2 [inventory] of parent2
  ask one-of (list parent1 parent2) [
    hatch 1[

      let xcort (xcor + (random fog-radius) - fog-radius / 2)
      set xcort (min list xcort max-pxcor)
      set xcor (max list xcort min-pxcor)
      
      let ycort  (ycor + (random fog-radius) - fog-radius / 2)
      set ycort (min list ycort max-pycor)
      set ycor (max list ycort min-pycor)
      
      set age 0
      set genome child-genome
      mutate
      set color child-color parent1 parent2
      
      
      set-people-variables
      set needs start-needs
      set inventory n-values (length inventory) [0]
    ]
  ]
end

to mutate
  if random-float 1.0 < mutation-chance[
   let index random (length genome)
   let rand (random-normal (item index genome) mutation-std)
   set genome (replace-item index genome rand)
  ]
end
